[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "KaruhaBot"
description = "A simple Tinode chatbot framework."
readme = "README.md"
license = {text = "Apache 2.0"}
authors = [
    {name = "Visecy", email = "Visecy@visecy.org"},
]
maintainers = [
    {name = "Ovizro", email = "Ovizro@visecy.org"},
]
urls = {repository = "https://github.com/Visecy/Karuha"}
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Communications :: Chat",
]

dependencies = [
    "typing_extensions>=4.9",
    "grpcio>=1.40.0",
    "tinode-grpc>=0.20.0b3",
    "pydantic>=2.9",
    "aiohttp>=3.7",
    "aiofiles>=23.1",
    "puremagic>=1.20"
]
requires-python = ">=3.8"
dynamic = ["version"]

[project.optional-dependencies]
lint = ["flake8>=6.1"]
image = ["pillow>=10.0"]
audio = ["soundfile>=0.12", "numpy>=1.21"]
attachment = ["KaruhaBot[image]", "KaruhaBot[audio]"]
cli = ["prompt_toolkit>=3.0"]
data = ["greenback"]
all = ["KaruhaBot[attachment]", "KaruhaBot[data]", "KaruhaBot[cli]"]
dev = ["KaruhaBot[all]", "KaruhaBot[lint]", "pytest", "pytest-asyncio", "coverage"]

[tool.setuptools.packages.find]
where = ["."]
include = ["karuha*"]

[tool.setuptools.dynamic]
version = {attr = "karuha.version.__version__"}

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

line-length = 127
indent-width = 4

# Assume Python 3.9
target-version = "py310"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = ["E402"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F4"]
